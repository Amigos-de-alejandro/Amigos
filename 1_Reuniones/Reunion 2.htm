<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mi visor de PDF</title>
    <!-- Incluye PDF.js -->
   <script src="https://amigos-de-alejandro.github.io/Amigos/.github/workflows/node.js.yml"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/4.0.189/pdf.min.mjs"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/4.0.189/pdf_viewer.min.css" integrity="sha512-9uknW5oN7ouvfOCw5wxRC3O9LmGrH3jhuCjcHnAHNvkP4s7Z5X0rWXxHHM0LcyWT/aBIMan/lCJHJtQx8eEAyg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <!-- Estilos para la interfaz de usuario -->
    <style>
        #pdf-container {
            width: 80%;
            margin: auto;
            border: 1px solid black;
        }
        #pdf-canvas {
            width: 100%;
        }
        #pdf-controls {
            display: flex;
            justify-content: center;
            align-items: center;
        }
        #pdf-page {
            width: 50px;
        }
    </style>
</head>
<body>
    <div id="pdf-container">
        <canvas id="pdf-canvas"></canvas>
        <div id="pdf-controls">
            <button id="pdf-prev">Anterior</button>
            <input id="pdf-page" type="number" value="1" min="1" max="1">
            <button id="pdf-next">Siguiente</button>
            <button id="pdf-zoom-in">+</button>
            <button id="pdf-zoom-out">-</button>
        </div>
    </div>

    <script>
        // Ruta del archivo PDF que deseas mostrar
        const pdfUrl = 'https://amigos-de-alejandro.github.io/Amigos/1_Reuniones/Reunion%202.pdf';

        // Crea un objeto para almacenar el estado del visor de PDF
        const pdfState = {
            pdf: null, // Referencia al objeto PDF
            pageIndex: 0, // Índice de la página actual
            zoom: 1 // Nivel de zoom actual
        };

        // Obtiene los elementos del DOM
        const pdfContainer = document.getElementById('pdf-container');
        const pdfCanvas = document.getElementById('pdf-canvas');
        const pdfContext = pdfCanvas.getContext('2d');
        const pdfPrev = document.getElementById('pdf-prev');
        const pdfNext = document.getElementById('pdf-next');
        const pdfPage = document.getElementById('pdf-page');
        const pdfZoomIn = document.getElementById('pdf-zoom-in');
        const pdfZoomOut = document.getElementById('pdf-zoom-out');

        // Carga el archivo PDF usando PDF.js
        pdfjsLib.getDocument(pdfUrl).promise.then(pdf => {
            // Guarda la referencia al objeto PDF en el estado del visor
            pdfState.pdf = pdf;
            // Actualiza el máximo del campo de entrada de la página
            pdfPage.max = pdf.numPages;
            // Despliega la primera página
            renderPage();
        });

        // Función para desplegar una página del PDF
        function renderPage() {
            // Obtiene la página actual del objeto PDF
            pdfState.pdf.getPage(pdfState.pageIndex + 1).then(page => {
                // Calcula el viewport de la página según el nivel de zoom
                const viewport = page.getViewport({ scale: pdfState.zoom });
                // Ajusta el tamaño del lienzo y del contenedor según el viewport
                pdfCanvas.width = viewport.width;
                pdfCanvas.height = viewport.height;
                pdfContainer.style.width = `${viewport.width}px`;
                // Renderiza la página en el lienzo
                page.render({
                    canvasContext: pdfContext,
                    viewport: viewport
                });
                // Actualiza el valor del campo de entrada de la página
                pdfPage.value = pdfState.pageIndex + 1;
            });
        }

        // Función para cambiar la página actual
        function changePage(offset) {
            // Calcula el nuevo índice de la página
            const newPageIndex = pdfState.pageIndex + offset;
            // Comprueba que el nuevo índice esté dentro del rango válido
            if (newPageIndex >= 0 && newPageIndex < pdfState.pdf.numPages) {
                // Actualiza el estado del visor y despliega la nueva página
                pdfState.pageIndex = newPageIndex;
                renderPage();
            }
        }

        // Función para cambiar el nivel de zoom
        function changeZoom(factor) {
            // Calcula el nuevo nivel de zoom
            const newZoom = pdfState.zoom * factor;
            // Comprueba que el nuevo nivel de zoom esté dentro del rango válido
            if (newZoom >= 0.5 && newZoom <= 2) {
                // Actualiza el estado del visor y despliega la página actual
                pdfState.zoom = newZoom;
                renderPage();
            }
        }

        // Añade los eventos a los botones de navegación
        pdfPrev.addEventListener('click', () => changePage(-1));
        pdfNext.addEventListener('click', () => changePage(1));

        // Añade el evento al campo de entrada de la página
        pdfPage.addEventListener('change', () => {
            // Obtiene el valor del campo de entrada
            const value = parseInt(pdfPage.value);
            // Comprueba que el valor sea un número válido
            if (isNaN(value) || value < 1 || value > pdfState.pdf.numPages) {
                // Si no lo es, restaura el valor anterior
                pdfPage.value = pdfState.pageIndex + 1;
            } else {
                // Si lo es, actualiza el estado del visor y despliega la nueva página
                pdfState.pageIndex = value - 1;
                renderPage();
            }
        });

        // Añade los eventos a los botones de zoom
        pdfZoomIn.addEventListener('click', () => changeZoom(1.1));
        pdfZoomOut.addEventListener('click', () => changeZoom(0.9));
    </script>
</body>
</html>
